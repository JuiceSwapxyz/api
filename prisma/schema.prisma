generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Central registry for wallet addresses
model User {
  id                      String   @id @default(uuid())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  address                 String   @unique

  // Relations
  ogCampaign              OgCampaignUser?
  firstSqueezerCampaign   FirstSqueezerCampaignUser?

  @@index([address])
}

// OG Campaign participation tracking
// Stores campaign progress for users who opt in
model OgCampaignUser {
  userId            String    @id
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Swap task tracking
  // Actual swap details are stored in Ponder indexer
  swapsCompleted    Int       @default(0)

  // Social verification - Twitter and Discord account linking
  twitterVerifiedAt DateTime?
  twitterUserId     String?
  discordVerifiedAt DateTime?
  discordUserId     String?
}

// First Squeezer Campaign participation tracking
// Tracks completion of: ₿apps Campaign, Twitter follow, Discord join
model FirstSqueezerCampaignUser {
  userId            String    @id
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Condition 1: Complete all 3 ₿apps Campaign swap tasks
  // This is checked via bApps campaign progress (separate table/logic)
  bappsCompleted    Boolean   @default(false)
  bappsCompletedAt  DateTime?

  // Condition 2: Follow @JuiceSwap_com on X (Twitter)
  twitterVerifiedAt DateTime?
  twitterUserId     String?
  twitterUsername        String?
  twitterOAuthState      String?   // Temporary storage for OAuth state (CSRF protection)
  twitterOAuthCodeVerifier String? // PKCE code verifier for token exchange

  // Condition 3: Join JuiceSwap Discord
  discordVerifiedAt DateTime?
  discordUserId     String?
  discordUsername   String?
  discordOAuthState String?   // Temporary storage for OAuth state (CSRF protection)

  // NFT Minting
  nftMinted         Boolean   @default(false)
  nftMintedAt       DateTime?
  nftTokenId        String?
  nftTxHash         String?

  @@index([userId])
  @@unique([twitterUserId])
  @@unique([discordUserId])
}
